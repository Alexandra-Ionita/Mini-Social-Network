/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package TemaTest;

import java.util.ArrayList;

/**
 * This is the main class of the project.
 * It has a constructor, getters and setters for the attributes, and
 * calls methods for all the commands.
 *
 * @see Post
 * @see Comment
 * @see User
 */
public class App {
  public App() {/* compiled code */}

  static ArrayList<User> users = new ArrayList<>();
  static ArrayList<Post> allPosts = new ArrayList<>();
  static ArrayList<Comment> allComments = new ArrayList<>();

  /**
   * This method returns the list of users.
   *
   * @return the list of users
   */
  static ArrayList<User> getUsers() {
    return users;
  }

  /**
   * This method returns the list of posts.
   *
   * @return the list of posts
   */
  static ArrayList<Post> getAllPosts() {
    return allPosts;
  }

  /**
   * This method returns the list of comments.
   *
   * @return the list of comments
   */
  public static ArrayList<Comment> getAllComments() {
    return allComments;
  }

  /**
   * This method returns the status of the command.
   *
   * @param status  represents the status of the command
   * @param message represents the message of the command
   * @return the status of the command
   */
  static String getStatus(String status, String message) {
    return String.format("{'status':'%s','message':'%s'}", status, message);
  }

  /**
   * This method extract the words from the strings elements.
   *
   * @param word represents the words of the command
   * @return the words of the command
   */
  static String getWords(String word) {
    int startWord = word.indexOf("'");

    return word.substring(startWord + 1, word.length() - 1);
  }

  /**
   * This method checks which command is called and calls the method
   * for that command.
   */
  public static void main(java.lang.String[] strings) {
    Commands commands = new Commands();
    ChecksForErrors checks = new ChecksForErrors();

    if (strings == null) {
      System.out.println("Hello world!");
      return;
    }

    String command = strings[0];

    switch (command) {
      case "-create-user":
        if (checks.getErrors(strings) == 0) {
          commands.createUser(getWords(strings[1]),
                  getWords(strings[2]));
        }
        break;

      case "-create-post":
        if (checks.getErrors(strings) == 0) {
          commands.createPost(getWords(strings[1]),
                  getWords(strings[3]));
        }
        break;

      case "-delete-post-by-id":
        if (checks.getErrors(strings) == 0) {
          commands.deletePost(getWords(strings[1]),
                  Integer.parseInt(getWords(strings[3])));
        }
        break;

      case "-like-post":
        if (checks.getErrors(strings) == 0) {
          commands.likePost(getWords(strings[1]),
                  Integer.parseInt(getWords(strings[3])));
        }
        break;

      case "-unlike-post":
        if (checks.getErrors(strings) == 0) {
          commands.unlikePost(getWords(strings[1]),
                  Integer.parseInt(getWords(strings[3])));
        }
        break;

      case "-comment-post":
        if (checks.getErrors(strings) == 0) {
          commands.commentPost(getWords(strings[1]),
                  Integer.parseInt(getWords(strings[3])),
                  getWords(strings[4]));
        }
        break;

      case "-like-comment":
        if (checks.getErrors(strings) == 0) {
          commands.likeComment(getWords(strings[1]),
                  Integer.parseInt(getWords(strings[3])));
        }
        break;

      case "-unlike-comment":
        if (checks.getErrors(strings) == 0) {
          commands.unlikeComment(getWords(strings[1]),
                  Integer.parseInt(getWords(strings[3])));
        }
        break;

      case "-delete-comment-by-id":
        if (checks.getErrors(strings) == 0) {
          commands.deleteComment(Integer.parseInt(getWords(strings[3])));
        }
        break;

      case "-get-post-details":
        if (checks.getErrors(strings) == 0) {
          commands.getPostDetails(Integer.parseInt(getWords(strings[3])));
        }
        break;

      case "-get-followings-posts":
        if (checks.getErrors(strings) == 0) {
          ArrayList<Post> posts = new ArrayList<>();
          commands.getFollowingsPosts(getWords(strings[1]), posts);
        }
        break;

      case "-get-following":
        if (checks.getErrors(strings) == 0) {
          commands.getFollowing(getWords(strings[1]));
        }
        break;

      case "-get-followers":
        if (checks.getErrors(strings) == 0) {
          commands.getFollowers(getWords(strings[1]));
        }
        break;

      case "-get-user-posts":
        if (checks.getErrors(strings) == 0) {
          ArrayList<Post> posts = new ArrayList<>();
          commands.getUserPosts(getWords(strings[3]), posts);
        }
        break;

      case "-get-most-followed-users":
        if (checks.getErrors(strings) == 0) {
          commands.getMostFollowed();
        }
        break;

      case "-get-most-liked-users":
        if (checks.getErrors(strings) == 0) {
          commands.getMostLiked();
        }
        break;

      case "-get-most-liked-posts":
        if (checks.getErrors(strings) == 0) {
          commands.getMostLikedPosts();
        }
        break;

      case "-get-most-commented-posts":
        if (checks.getErrors(strings) == 0) {
          commands.getMostCommentedPosts();
        }
        break;

      case "-cleanup-all":
        users.clear();
        allPosts.clear();
        allComments.clear();
        Post.setPostId(1);
        Comment.setCommentId(1);
        break;

      default:
        if (checks.getErrors(strings) == 0) {
          commands.followUnfollow(strings[0], getWords(strings[1]),
                  getWords(strings[3]));
        }
        break;
    }
  }
}
